c
following_user(session[:user_id]).collect{|a| [a.user_name, a.id]}
aa
c
@post.tags.create(user_id: params[:post][:tags])
params[:post][:tags]
params
params[:posts][:tags]
params[:tags]
@post.tags.create
c
n
@post
n
params
c
params
c
video_tag post.image
post.image.content_type.eql?("video/mp4")
c
post.image.content_type.eql?("video/mp4")
c
post.image.content_type.eql?("video/mp4")
c
post.image.content_type.eql?("video/mp4")
if post.image.content_type.eql?("video/mp4")
 post.image.content_type
c
 post.image.content_type
c
 post.image.content_type
c
 post.image.content_type
c
post.image.content_type
c
@post.errors
c
@post.errors
@post
c
user
value
c
value
user
params
c
params
c
params
c
params
c
params
c
params[:user]
params[:value]
params
c
@post = Post.find_by(id: params[:id])
c
params
c
params
c
params
c
params
c
params
c
params
c
User.find_by(id: Relationship.where(follower_id: @user, followed_id: @users).first.followed_id).user_name
User.find_by(id: Relationship.where(follower_id: @user, followed_id: @users).first.followed_id)
Relationship.where(follower_id: @user, followed_id: @users).first.followed_id
Relationship.where(follower_id: @user, followed_id: @users).first
Relationship.where(follower_id: @user, followed_id: @users)
c
n
c
Relationship.where(follower_id: @user, followed_id: @users).first
Relationship.where(follower_id: @user, followed_id: @users)
@users = User.joins(:likes).where("likes.likeable_type"=>"Post", "likes.likeable_id"=>post.id)
@mutual = User.find_by(id: Relationship.where(follower_id: @user, followed_id: @users).first)
@mutual = User.find_by(id: Relationship.where(follower_id: @user, followed_id: @users).first.id)
c
Relationship.where(follower_id: @user, followed_id: @users)
@mutual = User.find_by(id: Relationship.where(follower_id: @user, followed_id: @users).first)
@users = User.joins(:likes).where("likes.likeable_type"=>"Post", "likes.likeable_id"=>post.id)
c
@mutual = User.find_by(id: Relationship.where(follower_id: @user, followed_id: @users).first)
@mutual = User.find_by(id: Relationship.where(follower_id: @user, followed_id: @users).first).user_name
@mutual = User.find_by(id: Relationship.where(follower_id: @user, follwed_id: @users).first).user_name
@users = User.joins(:likes).where("likes.likeable_type"=>"Post", "likes.likeable_id"=>post.id)
c
params
c
params
c
params
c
request.url
request.url+"&value=saved"
request.url+"&value=saved".save
request.url
request.url+"&value=saved"
request.url
params
c
params
c
params
c
params
c
params
@posts = Post.joins(:saved_posts)
@save_post
n
c
session[:user]
session[:user_id]
session
c
params
request
c
params
request
c
request.url
c
request.url
c
request.url
request
c
request.url
request
req.url
c
@comment
c
comment.likes.count
c
@comments = Comment.find_by(id: params[:comment][:comment_id])
n
@comments = Comment.find_by(id: params[:comment][:comment_id])
params[:comment][:comment_id]
Comment.find_by(params[:comment][:comment_id]) 
params
c
@comments = params[:comment][:comment_id]
params[:comment][:comment_id].present?
c
comment
params
c
params[:value]
params
c
params
c
params
c
@posts = Post.joins(:saved_posts).where(user_id: current_user.id)
c
params
request.referrer
c
params
c
params
c
params
saved
post
params
c
post
saved
c
saved
post
params
c
render "likes/like", :locals => { post: save_post.post, saved: 1}
save_post = save_posts.first
save_posts.first
save_posts
params
render "likes/like", :locals => { post: save_post.post, saved: 1}
params
c
params
c
params
c
params
c
params
c
params
c
params
c
params
c
params
c
params
c
params
c
params
post
c
@save_post
c
@save_posts
c
@save_post.class
@save_post
c
@save_post.class
@save_post
c
@save_post.class
@save_post
c
@save_post
c
params
c
params
c
params
c
params
c
params
c
params
c
params
c
params
c
post
c
post.first
post
c
